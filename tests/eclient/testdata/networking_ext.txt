# Test for external TCP clien/server interconnection

{{$test_msg := "This is a test"}}
{{define "client_port"}}2232{{end}}
{{define "server_port"}}2233{{end}}
{{define "service_port"}}1234{{end}}
{{define "client_cons"}}7778{{end}}
{{define "server_cons"}}7779{{end}}
{{define "ssh"}}ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.root"}}/tests/eclient/image/cert/id_rsa -p {{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
{{/*
eden config set client --key eve.hostfwd --value '{"{{template "client_port"}}":"{{template "client_port"}}"}'
eden config set server --key eve.hostfwd --value '{"{{template "server_port"}}":"{{template "server_port"}}","{{template "service_port"}}":"{{template "service_port"}}"}'
eden config set client --key eve.telnet-port --value {{template "client_cons"}}
eden config set server --key eve.telnet-port --value {{template "server_cons"}}
*/}}
eden setup --config client
eden eve start --config client
eden eve onboard --config client

eden setup --config server
eden eve start --config server
eden eve onboard --config server

# Starting of reboot detector with a 2 reboot limit
! test eden.reboot.test -test.v -timewait 10m -reboot=0 -count=2 -config client &

# Starting of reboot detector with a 2 reboot limit
! test eden.reboot.test -test.v -timewait 10m -reboot=0 -count=2 -config server &

eden pod deploy --config client -n client --memory=512MB docker://itmoeve/eclient:0.3 -p {{template "client_port"}}:22
#test eden.app.test -test.v -timewait 20m -config client RUNNING client

eden pod deploy --config server -n server --memory=512MB docker://itmoeve/eclient:0.3 -p {{template "server_port"}}:22 -p {{template "service_port"}}:{{template "service_port"}}
#test eden.app.test -test.v -timewait 20m -config server RUNNING server

exec -t 20m bash wait_running.sh client server

exec -t 20m bash wait_ssh.sh {{template "client_port"}}
exec -t 20m bash wait_ssh.sh {{template "server_port"}}

eden pod ps --config server
cp stdout pod_ps
exec bash eserver_ip.sh

exec sleep 10
exec -t 1m bash setup_srv.sh {{template "server_port"}}
exec sleep 10
exec -t 1m bash run_srv.sh {{template "server_port"}} &
exec sleep 10
exec -t 1m bash run_client.sh {{template "client_port"}}
exec sleep 10
exec -t 1m bash get_result.sh {{template "server_port"}}
stdout '{{$test_msg}}'
{{/*
eden pod delete client --config client
eden pod delete server --config server

test eden.app.test -test.v -timewait 10m -config client - client
test eden.app.test -test.v -timewait 10m -config server - server

eden clean --config client
eden config delete client

eden clean --config server
eden config delete server
*/}}
-- wait_running.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
for cfg in $*
do
 for i in `seq 20`
 do
  $EDEN pod ps --config $cfg | grep $cfg | grep RUNNING && break
  sleep 20
 done
done

-- wait_ssh.sh --

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for i in `seq 20`
do
  sleep 20
  # Test SSH-access to container
  echo {{template "ssh"}} $1 root@$HOST grep -q Ubuntu /etc/issue
  {{template "ssh"}} $1 root@$HOST grep -q Ubuntu /etc/issue && break
done

-- eserver_ip.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
echo export SERVER_IP=$(grep '^server\s' pod_ps | cut -f 4 | sed 's/:.*//') > env
echo export HOST=$($EDEN eve ip) >> env

-- setup_srv.sh --
. ./env

echo {{template "ssh"}} $1 root@$HOST "echo ssh -o StrictHostKeyChecking=no root@$SERVER_IP nc -l {{template "service_port"}} > /tmp/server"
{{template "ssh"}} $1 root@$HOST "echo ssh -o StrictHostKeyChecking=no root@$SERVER_IP nc -l {{template "service_port"}} > /tmp/server"

-- run_srv.sh --
. ./env

echo {{template "ssh"}} $1 root@$HOST 'sh /tmp/server > /tmp/out'
{{template "ssh"}} $1 root@$HOST 'sh /tmp/server > /tmp/out'

-- run_client.sh --
. ./env

echo {{template "ssh"}} $1 root@$HOST "echo {{$test_msg}} | nc -N $HOST {{template "service_port"}}"
{{template "ssh"}} $1 root@$HOST "echo {{$test_msg}} | nc -N $HOST {{template "service_port"}}"

-- get_result.sh --
. ./env

echo {{template "ssh"}} $1 root@$HOST 'cat /tmp/out'
{{template "ssh"}} $1 root@$HOST 'cat /tmp/out'

-- eden-config.yml --
{{/* Test's config. file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
