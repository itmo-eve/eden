# Test app local info

{{define "port"}}8027{{end}}
{{define "token"}}server_token_123{{end}}
{{define "app_info_status_file"}}/mnt/app-info-status.json{{end}}
{{define "network"}}n1{{end}}
{{define "ssh"}}ssh -q -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa root@{{end}}

[!exec:bash] stop
[!exec:sleep] stop
[!exec:ssh] stop
[!exec:chmod] stop
[!exec:jq] stop

exec chmod 600 {{EdenConfig "eden.tests"}}/eclient/image/cert/id_rsa

# Starting of reboot detector with a 1 reboot limit
! test eden.reboot.test -test.v -timewait 100m -reboot=0 -count=1 &

message 'Resetting of EVE'
eden eve reset
exec sleep 30

# Create n1 network
eden -t 1m network create 10.11.12.0/24 -n {{template "network"}}
test eden.network.test -test.v -timewait 10m ACTIVATED {{template "network"}}

# Deploy local-manager
eden pod deploy -n local-manager --memory=512MB docker://lfedge/eden-eclient:9455582 -p {{template "port"}}:22 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING local-manager

# Wait for ssh access
exec -t 5m bash wait-ssh.sh {{template "port"}}

# Start local manager application
exec -t 1m bash local-manager-start.sh

# Obtain local-manager IP address
exec -t 2m bash get-app-ip.sh local-manager
source .env

# Configure local server
eden controller edge-node update --device profile_server_token={{template "token"}}
eden controller edge-node update --device local_profile_server=$app_ip:8888

# STEP 1: Wait for appinfo status
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
! stdout 'app1'
! stderr .

# STEP 2: Deploy the second app
eden pod deploy -n app1 --memory=512MB docker://lfedge/eden-eclient:9455582 --networks={{template "network"}}
test eden.app.test -test.v -timewait 10m RUNNING app1

# STEP 3: Wait for new appinfo status
exec sleep 30
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
stdout 'app1'
! stderr .

# STEP 4: Remove the second app
eden pod delete app1
test eden.app.test -test.v -timewait 15m - app1

# STEP 5: Wait for new appinfo status
exec sleep 30
exec -t 1m bash get-appinfo-status.sh
stdout 'local-manager'
! stdout 'app1'
! stderr .

# STEP 6: Undeploy local-manager
eden pod delete local-manager
test eden.app.test -test.v -timewait 15m - local-manager
eden network delete {{template "network"}}
test eden.network.test -test.v -timewait 10m - {{template "network"}}

-- wait-ssh.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
for p in $*
do
  for i in `seq 20`
  do
    sleep 20
    # Test SSH-access to container
    echo {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue
    {{template "ssh"}}$HOST -p $p grep -q Ubuntu /etc/issue && break
  done
done

-- local-manager-start.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
ARGS="--token={{template "token"}}"
{{template "ssh"}}$HOST -p {{template "port"}} "/root/local_manager $ARGS &>/dev/null &"

-- get-app-ip.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
IP=$($EDEN pod ps | grep $1 | awk '{print $4}' | cut -d ":" -f 1)
echo app_ip=$IP>>.env

-- get-appinfo-status.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
HOST=$($EDEN eve ip)
CMDS="
until test -f {{template "app_info_status_file"}}; do sleep 5; done
sleep 2
cat {{template "app_info_status_file"}}
"

{{template "ssh"}}$HOST -p {{template "port"}} "$CMDS"

-- eden-config.yml --
{{/* Test's config file */}}
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}
